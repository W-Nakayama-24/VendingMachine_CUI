@startuml
title 自販機システム_クラス図


UserInterface -- 自動販売機
自動販売機 -- Storage
自動販売機 ..> 上限チェッカー
自動販売機 ..> 金額チェッカー
Product -o Storage


class UserInterface {
    +int 希望金額
    +int 商品番号
    --
    +void 初期画面を表示する()
    --
    +void 機能を呼び出す()
    --
    +void 金額入力()
    +void 商品番号入力() 
    /'
    1,2,3,9以外ならここでfalseを返し、エラーメッセージ00を表示
    '/
}

class 自動販売機 {
    +int 投入金額
    +int get投入金額()
    +boolean お金を投入する(int 希望金額)

    +boolean 商品を購入する(int 商品番号)
    +int get在庫数(int 商品番号)
    +Product get商品情報(int 商品番号)

    +int 返金を受け取る()
    +void 自販機を終了する()
}

class 上限チェッカー{
    +{static}final int 投入金額の上限
    +boolean 上限に達していないかチェックする(int 希望金額, int 投入金額)
}


class 金額チェッカー{
    +boolean 投入金額が足りているかチェックする(int 単価, int 投入金額)
}

class Storage {
    +Map<商品番号, Product> 商品情報マップ
    +Map<商品番号, 在庫数> 在庫数マップ
    --
    +Storage()
    --
    +void 商品情報を商品情報マップに追加する(Integer 商品番号, Product 商品情報)
    +void 在庫数を在庫数マップに追加する(Integer 商品番号, Integer 在庫数)
    +Product get商品情報(int 商品番号)
    +int get在庫数(int 商品番号)
    +void 在庫を減らす(int 商品番号)
}

class Product {
    +int 商品番号
    +String 商品名
    +int 単価
    --
    +Product()
    --
    +int get商品番号()
    +String get商品名()
    +int get単価()
    /'
    コンストラクタでProduct型を用意して、
    3つの属性をひとつにまとめてmap.putできるように
    this.num = num
    this.price = price
    this.name = name
    '/
}

@enduml